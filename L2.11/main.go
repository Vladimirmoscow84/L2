/*Напишите функцию, которая находит все множества анаграмм по заданному словарю.

Требования
На вход подается срез строк (слов на русском языке в Unicode).

На выходе: map-множество -> список, где ключом является первое встреченное слово множества, а значением — срез из всех слов, принадлежащих этому множеству анаграмм, отсортированных по возрастанию.

Множества из одного слова не должны выводиться (т.е. если нет анаграмм, слово игнорируется).

Все слова нужно привести к нижнему регистру.

Пример:

Вход: ["пятак", "пятка", "тяпка", "листок", "слиток", "столик", "стол"]
Результат (ключи в примере могут быть в другом порядке):
– "пятак": ["пятак", "пятка", "тяпка"]
– "листок": ["листок", "слиток", "столик"]

Слово «стол» отсутствует в результатах, так как не имеет анаграмм.

Для решения задачи потребуется умение работать со строками, сортировать
и использовать структуры данных (map).

Оценим эффективность: решение должно работать за линейно-логарифмическое время относительно количества слов (допустимо n * m log m, где m — средняя длина слова для сортировки букв).*/

package main

import (
	"fmt"
	"sort"
	"strings"
)

func main() {
	arr := []string{"пятак", "пятка", "тяпка", "листок", "слиток", "столик", "стол", "stop", "tops", "spot", "кума", "мука"}

	angramms := multipleAnagrams(arr)
	fmt.Println(angramms)

}

// multipleAnagrams - принимает слайс строк и выводит множество анаграмм по первому встречающемуся слову в множестве
// отсортированных по возрастанию
func multipleAnagrams(s []string) map[string][]string {

	//инициалищируем три мапы:
	// - для вывода конечного результата
	answer := make(map[string][]string)

	//- для проверки повторов слов
	repeat := make(map[string]bool)

	// - для проверки наличия ключа мапе для ответа
	existKey := make(map[string]string)

	for _, v := range s {
		v = strings.ToLower(v)
		if _, ok := repeat[v]; ok {
			continue
		}
		repeat[v] = true
		word := sortString(v)
		if value, ok := existKey[word]; ok {
			answer[value] = append(answer[value], v)
			continue
		}
		existKey[word] = v
	}

	for i, v := range answer {
		if len(answer) < 1 {
			delete(answer, i)
			continue
		}
		sort.Strings(v)
	}
	return answer

}

// sortString - сортирует слово по возрастанию
func sortString(s string) string {
	runes := []rune(s)
	sort.Slice(runes, func(i, j int) bool {
		return runes[i] < runes[j]
	})
	return string(runes)

}
