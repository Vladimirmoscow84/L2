/*Что выведет программа?

Объяснить поведение срезов при передаче их в функцию.

package main

import (
  "fmt"
)

func main() {
  var s = []string{"1", "2", "3"}
  modifySlice(s)
  fmt.Println(s)
}

func modifySlice(i []string) {
  i[0] = "3"
  i = append(i, "4")
  i[1] = "5"
  i = append(i, "6")
}*/

/*Ответ:{3,2,3}
Срезы в Go передаются в функции по ссылке - в функцию предали срез i у которого базовый массив len = 3, cap = 3
i[0]=3 меняет в срезе и соответственно в базовм массиве элемент 0 на значение 3, длина и емкость не меняются (l,c = 3, 3)
при выполнении append создается новый срез (l,c=4,6), так как у старого недостаточно емкости, и сответственно у него теперь новый базовый массив, i[1]= 5 меняет в новом срезе элемент, соответственно в новом базовом массиве.
следующий append добавляет в новый срез элеент, но т.к. у нового среза (l,c = 4,6), то элемент добавляется без создания нового среза=> (l,c = 5,6)
в итоге в функции modifySlice изменения в базовый массив внесли только при проведении первого действия i[0]= 3*/

package main

import "fmt"

func main() {
	var s = []string{"1", "2", "3"}
	modifySlice(s)
	fmt.Println(s)
}

func modifySlice(i []string) {
	i[0] = "3"
	i = append(i, "4")
	i[1] = "5"
	i = append(i, "6")
}
